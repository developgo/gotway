// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	cache "github.com/gotway/gotway/internal/cache"
	mock "github.com/stretchr/testify/mock"
)

// CacheRepo is an autogenerated mock type for the CacheRepo type
type CacheRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, serviceKey
func (_m *CacheRepo) Create(_a0 cache.Cache, serviceKey string) error {
	ret := _m.Called(_a0, serviceKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Cache, string) error); ok {
		r0 = rf(_a0, serviceKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByPath provides a mock function with given fields: paths
func (_m *CacheRepo) DeleteByPath(paths []cache.CachePath) error {
	ret := _m.Called(paths)

	var r0 error
	if rf, ok := ret.Get(0).(func([]cache.CachePath) error); ok {
		r0 = rf(paths)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByTags provides a mock function with given fields: tags
func (_m *CacheRepo) DeleteByTags(tags []string) error {
	ret := _m.Called(tags)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: path, serviceKey
func (_m *CacheRepo) Get(path string, serviceKey string) (cache.Cache, error) {
	ret := _m.Called(path, serviceKey)

	var r0 cache.Cache
	if rf, ok := ret.Get(0).(func(string, string) cache.Cache); ok {
		r0 = rf(path, serviceKey)
	} else {
		r0 = ret.Get(0).(cache.Cache)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
